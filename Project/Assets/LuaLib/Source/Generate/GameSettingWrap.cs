//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class GameSettingWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(GameSetting), typeof(System.Object));
		L.RegFunction("OnInitEngine", OnInitEngine);
		L.RegFunction("OnInitData", OnInitData);
		L.RegFunction("OnInitDebug", OnInitDebug);
		L.RegFunction("New", _CreateGameSetting);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("ExtName", get_ExtName, null);
		L.RegVar("isWss", get_isWss, set_isWss);
		L.RegVar("ServerType", get_ServerType, set_ServerType);
		L.RegVar("ServerID", get_ServerID, set_ServerID);
		L.RegVar("ChannelID", get_ChannelID, set_ChannelID);
		L.RegVar("ClientType", get_ClientType, set_ClientType);
		L.RegVar("FacebookID", get_FacebookID, set_FacebookID);
		L.RegVar("WebBaseUrl", get_WebBaseUrl, set_WebBaseUrl);
		L.RegVar("WebServerURL", get_WebServerURL, set_WebServerURL);
		L.RegVar("RunningMode", get_RunningMode, set_RunningMode);
		L.RegVar("AssetServerSecretkey", get_AssetServerSecretkey, set_AssetServerSecretkey);
		L.RegVar("FrameworkPath", get_FrameworkPath, null);
		L.RegVar("isBundle", get_isBundle, null);
		L.RegVar("isBundle_needUpdate", get_isBundle_needUpdate, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateGameSetting(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				GameSetting obj = new GameSetting();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: GameSetting.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnInitEngine(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			GameSetting.OnInitEngine();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnInitData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.TextAsset arg0 = (UnityEngine.TextAsset)ToLua.CheckObject<UnityEngine.TextAsset>(L, 1);
			GameSetting.OnInitData(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnInitDebug(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			GameSetting.OnInitDebug();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ExtName(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameSetting.ExtName);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isWss(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, GameSetting.isWss);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ServerType(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameSetting.ServerType);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ServerID(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameSetting.ServerID);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ChannelID(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameSetting.ChannelID);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ClientType(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, GameSetting.ClientType);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FacebookID(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameSetting.FacebookID);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_WebBaseUrl(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameSetting.WebBaseUrl);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_WebServerURL(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameSetting.WebServerURL);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RunningMode(IntPtr L)
	{
		try
		{
			ToLua.Push(L, GameSetting.RunningMode);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AssetServerSecretkey(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameSetting.AssetServerSecretkey);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_FrameworkPath(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, GameSetting.FrameworkPath);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isBundle(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, GameSetting.isBundle);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isBundle_needUpdate(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, GameSetting.isBundle_needUpdate);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isWss(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			GameSetting.isWss = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ServerType(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameSetting.ServerType = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ServerID(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameSetting.ServerID = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ChannelID(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameSetting.ChannelID = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ClientType(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			GameSetting.ClientType = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_FacebookID(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameSetting.FacebookID = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_WebBaseUrl(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameSetting.WebBaseUrl = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_WebServerURL(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameSetting.WebServerURL = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_RunningMode(IntPtr L)
	{
		try
		{
			Enum_RunningMode arg0 = (Enum_RunningMode)ToLua.CheckObject(L, 2, typeof(Enum_RunningMode));
			GameSetting.RunningMode = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_AssetServerSecretkey(IntPtr L)
	{
		try
		{
			string arg0 = ToLua.CheckString(L, 2);
			GameSetting.AssetServerSecretkey = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

